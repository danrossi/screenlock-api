
/**
 * @license
 * screenlock-polyfill
 * @author danrossi / https://github.com/danrossi
 * Copyright (c) 2017 Google
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ScreenLockApi = factory());
})(this, (function () { 'use strict';

  var e=[],t=[];function n(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=Object.keys(r.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}}

  var css = "@media screen and (orientation: portrait) {\n  .screen-lockable.landscape {\n    transform: rotate(-90deg) !important;\n    transform-origin: left top;\n    width: 100vh !important;\n    height: 100vw !important;\n    max-height: 100% !important;\n    overflow-x: hidden !important;\n    position: absolute !important;\n    top: 100% !important;\n    left: 0 !important;\n    max-width: revert !important;\n  }\n}\n";
  n(css,{});

  /**
   * Screen orientation lock polyfill with IOS support.
   * 
   * @author danrossi / https://github.com/danrossi
   */

  function iosScreenLock() {
      return new Promise((accept) => {
          const el = document.querySelector(".screen-lockable");
          el && el.classList.add("landscape");
          (screen && screen.dispatchEvent || screen && screen.orientation.dispatchEvent || window.dispatchEvent)(new Event("orientationchange"));
          accept();
      });

  }

  function iosScreenUnlock() {
      const el = document.querySelector(".screen-lockable");
      el && el.classList.remove("landscape");
      (screen && screen.dispatchEvent || screen && screen.orientation.dispatchEvent || window.dispatchEvent)(new Event("orientationchange"));
  }

  if (window.screen) {
      const screenLockApi = screen.lockOrientation
          || screen.mozLockOrientation
          || screen.msLockOrientation
          || screen.orientation && screen.orientation.lock && screen.orientation.lock.bind(screen.orientation);

      screen.lockOrientationUniversal = screenLockApi
          || iosScreenLock;

      screen.supportsScreenLock = !!screenLockApi;

      screen.unlockOrientationUniversal = screen.unlockOrientation
          || screen.mozUnlockOrientation
          || screen.msUnlockOrientation
          || screen.orientation && screen.orientation.unlock && screen.orientation.unlock.bind(screen.orientation)
          || iosScreenUnlock;

  } else {
      const _listeners = [];
      window.screen = {
          supportsScreenLock: false,
          addEventListener: (name, callback) => {
              if (!_listeners[name]) _listeners[name] = [];
              _listeners[name].push(callback);
          },
          dispatchEvent: (name) => {
              _listeners[name].forEach(callback => callback());
          }

      };
      window.screen.lockOrientationUniversal = iosScreenLock;
      window.screen.unlockOrientationUniversal = iosScreenUnlock;
  }

  class ScreenLockApi {

      /**
       * Native Screen lock api support
       */
      static get supportsScreenLock() {
          return screen.supportsScreenLock;
      }

      /**
       * Set a lock element for IOS fallback
       * @param {*} element 
       */
      static lockElement(element) {
          element.classList.add("screen-lockable");
      }
      /**
       * Screen lock api
       * @param {*} option 
       * @returns 
       */
      static lock(option) {
          return screen.lockOrientationUniversal(option);
      }

      /**
       * Screen unlock api
       * @returns 
       */
      static unlock() {
          return screen.unlockOrientationUniversal();
      }
  }

  return ScreenLockApi;

}));
