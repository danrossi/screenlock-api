
/**
 * @license
 * screenlock-polyfill
 * @author danrossi / https://github.com/danrossi
 * Copyright (c) 2017 Google
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.FullscreenApi = factory());
})(this, (function () { 'use strict';

    var e=[],t=[];function n(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=Object.keys(r.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}}

    var css = ".ios-fs {\n  top: 0 !important;\n  left: 0 !important;\n  border: 0 !important;\n  margin: 0 !important;\n  width: 100vw !important;\n  height: 100vh !important;\n  max-width: 100% !important;\n  z-index: 99999 !important;\n  -webkit-box-shadow: 0 !important;\n  box-shadow: 0 !important;\n  background-image: none !important;\n  background-color: #333;\n  position: fixed !important;\n}\n";
    n(css,{});

    /**
     * FullscreenAPI
     * Fullscreen api helper. Includes IOS iPhone fullscreen css hack as fallback. 
     * @author danrossi / https://github.com/danrossi
     */



    const _exitFullScreenApi = document.exitFullscreen 
    || document.webkitCancelFullScreen 
    || document.mozCancelFullScreen 
    || document.msExitFullscreen;


    const _fullScreenAvailable = document.fullscreenEnabled || 
                                document.mozFullscreenEnabled ||
                                document.webkitFullscreenEnabled ||
                                document.msFullscreenEnabled;

    let _webkitCurrentFullScreenElement;

    class FullscreenApi {

        /**
         * Has native fullscreen support
         */
        static get fullScreenAvailable() {
            return _fullScreenAvailable;
        }

        /**
         * Get current fullscreen element 
         */
        static get currentFullScreenElement() {
            return document.webkitCurrentFullScreenElement 
            || document.mozFullScreenElement 
            || document.fullscreenElement 
            || document.msFullscreenElement
            || _webkitCurrentFullScreenElement;
        }

        /**
         * IOS request fullscreen
         * @param {*} element 
         * @param {*} parentElement 
         * @returns 
         */
        static iosRequestFullscreen(element, parentElement) {
            return new Promise((accept) => {
                const el = (parentElement || element);
                el.classList.add("ios-fs");
                _webkitCurrentFullScreenElement = el;
                document.dispatchEvent(new Event("webkitfullscreenchange"));
                accept();
            });
            
        }

        /**
         * IOS exit fullscreen
         * @param {*} element 
         * @param {*} parentElement 
         * @returns 
         */
        static iosExitFullscreen(element, parentElement) {
            return new Promise((accept) => {
                (parentElement || element).classList.remove("ios-fs");
                _webkitCurrentFullScreenElement = null;
                document.dispatchEvent(new Event("webkitfullscreenchange"));
                accept();
            });
        }

        /**
         * Request fullscreen
         * @param {*} element 
         * @param {*} parentElement 
         * @returns 
         */
        static requestFullscreen(element, parentElement) {
            
           if (this.fullScreenAvailable) {
                const requestFullscreen = element.requestFullscreen 
                || element.mozRequestFullScreen 
                || element.webkitRequestFullscreen 
                || element.msRequestFullscreen;

                return requestFullscreen.bind(element)();
            } else {
                return this.iosRequestFullscreen(element, parentElement);
            }
        }

        /**
         * Exit fullscreen
         * @param {*} element 
         * @param {*} parentElement 
         * @returns 
         */
        static exitFullscreen(element, parentElement) {

            if (this.fullScreenAvailable) {
                return _exitFullScreenApi.bind(document)();
            } else {
                return this.iosExitFullscreen(element, parentElement);
            }
        }
    }

    return FullscreenApi;

}));
